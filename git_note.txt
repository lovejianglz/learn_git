# git

## init
用法：*git init* 初始化git repository

## congif
用法：  
git config --local user.name name  
git config --local user.email email  
--system:作用于本机  
--global:作用于本登陆用户  
--local:作用于本respository

## add
* 添加工作区中已修改的文件到缓存区
* 标识冲突已被处理
* 把git未追踪的文件纳入缓存区

## tag
用法  *git tag*

## status
用法：*git status* 查看当前代码仓库状态

## reset
用法：*git reset HEAD file*把file从缓存区移除

## stash
*git stash*暂存当前工作区的变化  
*git stash pop*恢复之前暂存的工作区  
*git stash show*

## commit
*git commit -am "message"* 提交修改

## branch
*git branch branch_name* 创建一个分支

## checkout
*git chechkout branch_name* 切换到branch_name分支
*git checkout -- file*  取消file在当前工作区的修改

## diff
用法：*git diff* 显示缓存区与工作区的差异  
用法：*git diff [commit_id]* 显示指定提交与当前工作区的差异  
例子：*git diff HEAD* 显示当前提交与工作区的差异  
用法：*git diff --cached [commit_id]* 显示制定提交与当前暂存区的差异  
例子: *git diff --cached* 最新的提交与暂存区的差异

## merge
*git merge branch_name*合并目标分支到当前分支

## rm
*git rm --cache file* 取消文件file追踪

## clone
* git clone 从远程复制代码到当前目录，并以远程项目名作为文件按名
* git clone repository-name 从远程复制代码到当前目录，以repository-name作为目录

## 添加git hub 远程仓库  	
### https
*git remote add origin https://github.com/lovejianglz/learn_git.git* origin 是远程仓库的别名  
### ssh  
*git remote add origin git@github.com:lovejianglz/learn_srcapy.git* origin 是远程仓库的别名  
在github中获取远程的SSH地址，在本地生成密钥 *ssh-keygen* 私钥放于.ssh文件中，把公钥配置到github中即可  
*git push -u origin master* 把本地master的代码推送到远程  
*git remote show* 列出与当前目录关联的所有远程仓库

> \* remote origin  
  Fetch URL: https://github.com/lovejianglz/learn_git.git  
  Push  URL: https://github.com/lovejianglz/learn_git.git  
  HEAD branch: master  
  Remote branch:  
    master tracked  
  Local branch configured for 'git pull':  
    master merges with remote master  
  Local ref configured for 'git push':  
    master pushes to master (up to date)  

## push
把代码推送到远程代码库 要把本地代码推送到远程，需要先PULL到本地

## pull
从远程代码库拉取代码至本地，同时会执行合并  
pull = fetch + merge
	
* 本地分支 master 
* 远程分支 origin/master 与远程版本库对应的分支 即远程的master
* 远程 master  
执行pull操作，把远程代码先pull到origin/master这个分支上，然后对本地master进行merge操作  
执行push操作，先把origin/master指向本地master，再通过origin/master提交到远程上

fast-forward

1. gitflow
2. 基于Git分支的开发模型:  
develop分支（频繁变化）  
test分支   
master分支  
bugfix分支  
https://github.com/lovejianglz/learn_git.git